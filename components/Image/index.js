import React, { useState, useRef, useEffect } from "react";
import styles from "./image.module.css";

const Image = ({ src, alt, maxWidth, className, ...props }) => {
  const defaultSource = require(`../../public/images/${src}`);
  const webpSource = require(`../../public/images/${src}?format=webp`);
  const aspectRatio = defaultSource.height / defaultSource.width;

  const [loaded, setLoaded] = useState(false);
  const [loading, setLoading] = useState(false);
  const imageRef = useRef();

  function handleImageLoaded() {
    const image = imageRef.current.querySelector("img");
    if (!image.complete) {
      setLoading(true);
    } else {
      setLoading(false);
      setLoaded(true);
    }
  }

  useEffect(() => {
    const image = imageRef.current.querySelector("img");
    if (image.complete) {
      setLoaded(true);
    } else {
      setLoaded(false);
      setLoading(true);
    }
  }, []);

  const mediaMap = [
    "(max-width: 512px)",
    "(min-width: 513px) and (max-width: 720px)",
    "(min-width: 721px) and (max-width: 1024px)",
    "(min-width: 1025px) and (max-width: 1280px)",
    "(min-width: 1281px) and (max-width: 1440px)",
    "(min-width: 1441px)",
  ];

  return (
    <div
      ref={imageRef}
      className={styles.container}
      style={{
        width: "100%",
        maxWidth: maxWidth ? `${maxWidth}px` : "100%",
      }}
    >
      <div
        className={styles.aspectRatio}
        style={{
          paddingBottom: `${aspectRatio * 100}%`,
        }}
      >
        <picture className={styles.picture}>
          {mediaMap.map((media, index) => {
            // Get total images generated by responsive-loader
            const totalImages = defaultSource.images.length - 1;
            // Set imageIndex to current index
            let imageIndex = index;
            // If index is greater or equal to totalImages generated,
            // use the largest to fulfill all media requirements
            if (index >= totalImages) {
              imageIndex = totalImages;
            }
            // Get
            const defaultPath = defaultSource.images[imageIndex].path;
            const webpPath = webpSource.images[imageIndex].path;
            return (
              <React.Fragment key={`image_${index}`}>
                <source srcSet={webpPath} media={media} />
                <source srcSet={defaultPath} media={media} />
              </React.Fragment>
            );
          })}
          <img
            src={defaultSource.images[0].path}
            className={[
              styles.image,
              loaded ? styles.loaded : "",
              loading ? styles.loading : "",
              className,
            ].join(" ")}
            {...props}
            onLoad={handleImageLoaded}
            loading="lazy"
            alt={alt}
          />
        </picture>
      </div>
    </div>
  );
};

export default Image;
